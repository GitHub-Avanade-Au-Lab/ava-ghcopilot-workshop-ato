{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "01-Basic-Usage",
  "steps": [
    {
      "title": "Introduction",
      "description": "In this first demo, we're going to explore the core functionality of GitHub Copilot. I'm going to demonstrate the basics of how you can leverage this AI-powered tool to enhance your coding experience\r\n\r\nPress `Next` to continue ðŸ‘‡"
    },
    {
      "file": "exercise/python/demo.py",
      "description": "# Context is Key\nContext provides the necessary backdrop that informs the purpose and function of the code. For GitHub Copilot, context comes from comments, code structure, and opened files that guide its AI to generate relevant and useful suggestions. By feeding it descriptive comments and clear code patterns from other files, Copilot can better understand the intent behind code segments and assist in crafting suggestions tailored to your needs.\n\nLet's dive into a simple yet insightful example that showcases how Copilot interprets our comments to provide intelligent completions.\n\nLet's begin with a straightforward Q&A comment in our demo.py file. I will write simple Q&A written in python comments and let Github Copilot suggest an answer.\n\n```python\n# Question: What are the popular JavaScript frameworks?\n# Answer:\n```\n\nCopilot's suggestion will appear in a translucent text, usually referred to as \"Ghost Text\". Simply press `Tab` to accept the suggestion.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 9,
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 28
        }
      }
    },
    {
      "file": "exercise/python/demo.py",
      "description": "Let's write another question, this time asking about popular databases. \n\n```python\n# Question: What are the popular web databases?\n# Answer:\n```\n\nWhile GitHub Copilot operates across various programming languages, remember to use the language-specific commenting character, such as # for Python or double slash `//` for JavaScript, to provide context. This ensures Copilot accurately interprets your intent and offers the most suitable suggestions for your code.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 11
    },
    {
      "title": "Recap",
      "description": "GitHub Copilot is fundamentally a predictive tool that leverages a Large Language Model to suggest probable code snippets, not guaranteed solutions, based on the context and patterns in your coding."
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's give GitHub Copilot some context about what we're trying to do. Let's start by adding the following comment to the file line of the demo.js file. \n\n```javascript\n// Generate a function that will accept a string and return the string in reverse\n```\nAccept Copilot's suggestions by pressing `Tab` then `Enter`.\n\nPress Enter until you see the suggestion to output the result using the Console.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's run and test this reverseString function in the terminal. \n\n```python\nnode exercise\\javascript\\demo.js\n```\n\n\nPress `Next` to continue ðŸ‘‡",
      "line": 10
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's change the word to ALVIN and test it again. \n\n```python\nnode exercise\\javascript\\demo.js\n```\n\nRemember to Save the File before executing in the terminal.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 10
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Delete the existing code and comment at the top. We'll now see how GitHub Copilot responds with vague requests.\n\n```javascript\n// Generate a function that will perform calculations\n```\n\nPress `Next` to continue ðŸ‘‡\n\n\n",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Notice that vague comments may yield unexpected suggestions from GitHub Copilot. For precise, useful code generation, always provide clear, specific comments to guide its suggestion.",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's delete the existing code and comment at the top. let's now provide a clearer comment.\n\n```javascript\n// Generate a function that will accept two numbers and an arithmetic operator. The function will perform the operation between the numbers and return the result.\n```\n\nPress `Next` to Test the Function\n\n\n",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's ask Copilot to add a statement to test this calculator function\r\n\r\n```javascript\r\n// Try out the function with different numbers and operations\r\n```\r\n\r\nPlace your cursor at the end of the comment then press `Enter`. Wait for Copilot to provide a suggestion.",
      "line": 18
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Run the code in the Terminal\r\n\r\n```javascript\r\nnode exercise\\javascript\\demo.js\r\n```\r\n\r\nSave demo.js then copy and paste the command in the terminal window then press `Enter`",
      "line": 20
    },
    {
      "title": "Recap",
      "description": "Providing clear context to GitHub Copilot significantly improves your chances of receiving the most relevant and optimal code suggestions. Context is Key and Precision matters."
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Delete the console.log and the fuction. Let's get Copilot help us recreate the function using a different and ask it for additional suggestion. Let's type the what we want the function name to be and observe how Copilot will suggest code in this manner.\r\n\r\n```javascript\r\nfunction performCalculation()\r\n```\r\n\r\nUse Ctrl+Right Arrow to accept each suggestion one item at a time. Once all the parameters are suggested, press Ctrl+Enter to view Copilot's additional suggestion pane.\r\n\r\nSelect the suggestion the satisfies your requirement.",
      "line": 2
    },
    {
      "title": "Recap",
      "description": "The 'Additional Suggestions pane' in GitHub Copilot offers developers multiple versions of code suggestions, giving you choices to best fit your specific requirements."
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "As a developer, you may know another way that the code can be written, but you're not sure about the syntax. Copilot can help you with that.\r\nLet's say you know about the eval() built-in function in JavaScript, but you're not sure how to use it. Highlight the function and press Ctrl+i.\r\n\r\nIn the inline-chat Window, type `refactor this code using eval()`, then let's see what Copilot suggests\r\n\r\nIf you like the suggestion, simply click \"Accept\", or \"Discard\" if you don't want to use the suggestion.",
      "line": 2
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Using Ctrl+i, let's ask Copilot to add an error handler for invalid parameter type and operation.\r\n\r\nHighlight the entire function. Type in this instructions into the inline chat and see what Copilot will suggest.\r\n\r\n`\r\nAdd an error handler for this function\r\n`",
      "line": 6
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's ask Copilot to test the function by instructing it to ask user input for the values in the terminal so we don't have to hard code the values.\r\n\r\nDelete any comment and the console.log that tests the function, if any, then insert the comment below the function.\r\n\r\n```javascript\r\n// Test the function by accepting user input for the numbers and the operator using Node Readline.\r\n```\r\nPlace your cursor at the end of the comment then press `Enter`. Wait for Copilot to provide a suggestion, then hit Ctrl+i to view the Additional Suggestions pane.",
      "line": 22
    },
    {
      "title": "Providing more context",
      "description": "GitHub Copilot can provide better suggestions the more context you provide it. Besides using clear comments, meaningful names for functions and variables, having related files open can also help GitHub Copilot to generate more relevant suggestions, which we will see in the next demo."
    },
    {
      "file": "complete/javascript/context.js",
      "description": "This is a sample javascript file with some sample functions. Let's open demo.js again and repeat the previous demo where we've asked Copilot to produce a function the performs a calculation between two numbers.",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Let's delete the existing code and comment at the top. let's now provide a clearer comment.\n\n```javascript\n// Generate a function that will accept two numbers and an arithmetic operator. The function will perform the operation between the numbers and return the result.\n```\n\nPress `Next` to continue ðŸ‘‡\n\n\n",
      "line": 1
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "Notice how GitHub Copilot used the pattern on how functions are written from the Context.js. Note that `context.js` could be any other file in your code base. It doesn't need to have the name context.js.\n\nA feature of Copilot is that it adapts to Context based on the other files that are open. By having relevant files adjacent to the one you are working on, Copilot might give a more suitable suggestion or even match the pattern how functions in your project are written. In a real-world scenario, you can open other files in your current project and use that as guidance for Copilot to suggest, enabling you to follow your development standards while using GitHub Copilot.\n\n\n",
      "line": 12
    }
  ],
  "ref": "main"
}
{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "05-Building-a-simple-Data-Analysis-WebApp",
  "steps": [
    {
      "title": "Introduction",
      "description": "## Build a simple Data Analysis App in Python\r\n\r\nIn this demonstration, we will explore the seamless integration of GitHub Copilot in the creation of a simple Data Analysis application using Python, all within the innovative framework of Streamlit. Our objective is to showcase the capabilities of GitHub Copilot as we build, from the ground up, a simple Data Analysis tool.\r\n"
    },
    {
      "title": "What is Streamlit",
      "description": "## Streamlit\r\n\r\nStreamlit is a rapid development Python framework designed for creating data-centric web apps with minimal code. It streamlines the creation of interactive dashboards, offering a simple API to integrate widgets and visualize data effortlessly. Ideal for data scientists and engineers, Streamlit facilitates sharing insights without the need for extensive web dev skills, relying on pure Python for most operations.\r\n\r\nHere's a basic example of a Python code using the Streamlit Web framework\r\n\r\n### Simple Streamlit Code\r\n\r\n```python\r\nimport streamlit as st\r\n\r\n# Title of the web app\r\nst.title('Square Number Calculator')\r\n\r\n# User input\r\ninput_num = st.number_input('Enter a number', value=0)\r\n\r\n# Calculate square\r\nsquare = input_num ** 2\r\n\r\n# Display the square of the input number\r\nst.write('The square of', input_num, 'is', square)\r\n```"
    },
    {
      "title": "Create a Streamlit file",
      "description": "### Create a blank .py file\r\n\r\nLet's create a blank Python file that will run our Streamlit application.\r\n\r\nUnder exercise\\python\\streamlit, create a new file called `analaysedata.py`\r\n\r\nPress `Next` to continue"
    },
    {
      "title": "Create the Streamlit app",
      "description": "## Ask Copilot to create a Streamlit app\r\n\r\nLet's now ask Copilot Chat to suggest an intial Streamlit page.\r\n\r\n```text\r\nCreate a Streamlit app that accepts a CSV File upload and displays the data.\r\n```\r\n\r\n(Switch to the Chat window)\r\n\r\nPress `Next` to continue"
    },
    {
      "title": "Copy the code",
      "description": "### Copy the Code\r\n\r\nNow, let's switch back to analysedata.py and let's copy the code. \r\n\r\n> Tip: Rather than selecting the entire code, copy and pasting, you can use Copy Icon or the Insert at Cursor button to copy the entire code block into the file.\r\n\r\nLet's try it out.\r\n\r\n(Switch to analysedata.py)\r\n\r\nPress `Next` to continue"
    },
    {
      "title": "Basic Streamlit app",
      "description": "### Basic Streamlit App\r\n\r\nYou've now created a simple Streamlit application. \r\nLet's now see it in action.\r\n\r\nTo run a streamlit app, simply execute below in the Terminal:\r\n\r\n(Open PowerShell Terminal window in VS Code)\r\n\r\n&nbsp;\r\n\r\n> Tip: Pressing Ctrl+` will open the Terminal\r\n\r\n&nbsp;\r\n\r\n### Activate Python Virtual Environment\r\nLet's activate first our venv. You need to be in the root project directory to execute this.\r\n&nbsp;\r\n```powershell\r\n.\\ghcp\\scripts\\activate\r\n```\r\n\r\n&nbsp;\r\n\r\n```powershell\r\ncd exercise\\python\\streamlit\r\nstreamlit run analysedata.py\r\n```\r\n\r\nPress `Next` to continue"
    },
    {
      "title": "Browse for the file",
      "description": "### Browse for the file\r\n\r\nLet's now browse for the file that we need to use. It's found under `C:\\Projects\\ghcpdemo\\complete\\csv`\r\n\r\nClick Browse files and select usage.csv\r\n\r\n\r\n\r\n"
    },
    {
      "title": "Add features",
      "description": "### Add Features\r\n\r\nOk, great. Now, what our application can succesfully read and display the contents of the CSV file, let's now ask Copilot to add a feature.\r\n\r\nWe want to display a chart that visualizes the aggregated suggestion versus acceptance by day. \r\n\r\nIn this scenario, we need to be very clear and concise on what we need Copilot to suggest for us. Let's try this out:\r\n\r\n&nbsp;\r\n\r\n```text\r\nI want to add a line chart that visualises the suggestions versus acceptance counts by day\r\n```\r\n&nbsp;\r\nBefore asking Copilot Chat, remember that the analysedata.py file is open. We expect that Copilot will use this as context for its suggestion. \r\n\r\nOk, let's see what Copilot gives us with this prompt.\r\n\r\n&nbsp;\r\n\r\n(Switch to Copilot chat)\r\n\r\n&nbsp;\r\n\r\nLet's review the code then copy it over into our analysedata.py.\r\n\r\n(Switch to analysedata.py, while having Chat opened as well)\r\n\r\n&nbsp;\r\n\r\nSelect all text from analysedata.py, then overwrite it with the code from Copilot Chat.\r\nRe-run the application after copying the code.\r\n\r\n\r\nPress `Next` to Continue"
    },
    {
      "title": "Fixing the error",
      "description": "### Fixing the error\r\n\r\nLooks like there's something wrong with the code, or was there something wrong with our prompt?\r\n\r\nIf you remember we prompted it with\r\n\r\n`I want to add a line chart that visualises the suggestions versus acceptance counts by day`\r\n\r\nHowever, Copilot doesn't really know if the columns suggestion and acceptance do exist. It just trusted what you provided is true and used that to suggest a code snippet.\r\n\r\nThis is where the importance of provided context come into play. We need to provide Copilot an idea of the structure of the csv file so it can use that as context when generating its suggestion.\r\n\r\nLet's now add more context into our instructions. I've prepared a file called usage.md where I've stored a markdown format of the csv data with two rows. This will be enough to provide Copilot context on the structure of the csv.\r\n\r\nOpen C:\\Projects\\ghcpdemo\\complete\\csv\\usage.md then copy the markdown table\r\n\r\n### Revised instructions\r\n\r\n```text\r\nI want to add a line chart that visualises the suggestions versus acceptance counts by day`\r\n\r\nRefer to the column names as shown in the example markdown table below:\r\n\r\n| breakdown_language | breakdown_editor | breakdown_suggestions_count | breakdown_acceptances_count | breakdown_lines_suggested | breakdown_lines_accepted | breakdown_active_users | day        | total_suggestions_count | total_acceptances_count | total_lines_suggested | total_lines_accepted | total_active_users |\r\n| ------------------ | ---------------- | --------------------------- | --------------------------- | ------------------------- | ------------------------ | ---------------------- | ---------- | ----------------------- | ----------------------- | --------------------- | -------------------- | ------------------ |\r\n| polyglot-notebook  | vscode           | 11                          | 3                           | 12                        | 3                        | 2                      | 10/03/2024 | 451                     | 82                      | 896                   | 137                  | 6                  |\r\n| python             | vscode           | 15                          | 2                           | 23                        | 2                        | 2                      | 10/03/2024 | 451                     | 82                      | 896                   | 137                  | 6                  |\r\n\r\n\r\n```\r\n\r\nLet's now copy this entire thing and pop it in to the Chat.\r\n\r\n(Observe Copilot's suggestion)\r\n\r\nPress `Next` to continue\r\n"
    },
    {
      "title": "More Context better results",
      "description": "### With good context comes good suggestions\r\n\r\nAs you can see, Copilot was smart enough to infer that breakdown_suggestions_count and breakdown_acceptance count are the columns to be used in generating the chart, even though we only mentioned \"suggestion\" and \"acceptance\".\r\n\r\nThis is the power of Context. With enough context, Copilot chat will take care of connecting the dots as best as it can.\r\n\r\nProviding an example data structure will enable Copilot to suggest more relevant results based examples.\r\n\r\nLet's now overwrite the contents of analysedata.py with this new suggestion and try it out.\r\n\r\n(Copy the code, save then re-run the application)\r\n\r\nPress `Next` to continue"
    }
  ],
  "ref": "main"
}
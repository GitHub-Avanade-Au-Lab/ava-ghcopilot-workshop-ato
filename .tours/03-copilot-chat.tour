{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "03-Copilot-Chat",
  "steps": [
    {
      "title": "Introduction",
      "description": "# GitHub Copilot Chat\r\n\r\nLet's now explore the benefits of GitHub Copilot Chat, a conversational interface that allows developers to interact with GitHub Copilot in natural language and get instant feedback and suggestions for your code challenges or needs. \r\n\r\nLearn how GitHub Copilot Chat can enhance your productivity, creativity, and learning as a developer by providing you with a responsive and reliable AI pair programmer."
    },
    {
      "title": "Prompt crafting Principles",
      "description": "### What is Prompt Crafting?\r\n\r\nPrompt crafting involves writing clear instructions or comments to elicit the most accurate and useful responses from GitHub Copilot chat. Mastering this skill can considerably improve your interactions with the AI, harnessing its capabilities to enhance coding efficiency and accuracy.\r\n\r\n### What's the difference with Prompt Engineering?\r\n\r\nPrompt Engineering is a more systematic approach, utilizing insights into AI model behavior to improve interaction over time. It is commonly used when developing Large Language Model (LLM) based applications where you specifically \"Engineer\" the instructions to the LLM on how it should interact with users.\r\n\r\nBecause GitHub Copilot is already configured to respond and only suggest to coding related context, it has already been \"Prompt Engineered\", and developers will just need to interact with it as if working with another programmer, but an AI in this case.\r\n\r\n### Ask a non-coding question\r\nLet's see how Chat will respond to a non-coding related question.\r\n\r\n```text\r\nProvide me the recipe for a chicken casserole\r\n```\r\n\r\nAs expected, Copilot chat will politely say that it can only assist with programming related questions. It has undergone extensive prompt engineering by GitHub's AI experts, which streamlines its responses towards coding-related inquiries.",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 3,
          "character": 287
        }
      }
    },
    {
      "title": "The 3 S's of GitHub Copilot Chat",
      "description": "## The three S's of Prompt Crafting\r\n\r\nWhen using GitHub Copilot Chat, craft simple, specific, and short prompts to maximize the effectiveness of GitHub Copilot.\r\n\r\nBelow are some examples of prompts that are simple, specific, and concise:\r\n\r\n### **Create a Function:**\r\n\"Define a Python function that calculates the factorial of a number.\"\r\n\r\nSimple: The prompt targets a single, clear ask—defining a function.\r\n\r\nSpecific: It clearly states the function’s purpose is to calculate a factorial.\r\n\r\nShort: The instruction is direct and to the point, avoiding excess detail.\r\n\r\n\r\n### **Fix a Common Error:**\r\n\"Correct the 'index out of bounds' error in this Java array loop.\"\r\n\r\nSimple: The prompt asks to address one specific issue.\r\n\r\nSpecific: It identifies the exact error \"index out of bounds\" within a Java loop.\r\n\r\nShort: The prompt is brief, communicating only the essential information.\r\n\r\n### **Write a Test:**\r\n\"Generate a Jest test for a React button click event.\"\r\n\r\nSimple: The task is focused solely on test generation.\r\n\r\nSpecific: It specifies the test framework (Jest), the application type (React), and the event to test (button click).\r\n\r\nShort: The prompt is succinct and contains no unnecessary verbiage.\r\n\r\n\r\n### **Handle an Exception:**\r\n\"Add error handling for a file-not-found exception in this JavaScript code.\"\r\n\r\nSimple: The prompt requests addition of a single exception handling case.\r\n\r\nSpecific: It details the exception type \"file-not-found\" and the code context (JavaScript).\r\n\r\nShort: The phrasing is compact, easily directing Copilot’s action.\r\n\r\n### **Scaffold a Structure:**\r\n\"Scaffold a basic HTML page layout with a header, footer, and two columns.\"\r\n\r\nSimple: The prompt is about one task: scaffolding a page layout.\r\n\r\nSpecific: The layout elements are distinctly mentioned: a header, footer, and two columns.\r\n\r\nShort: The description is concise, yet clearly describes the layout structure."
    },
    {
      "title": "Prompt crafting guidance",
      "description": "Here are five key suggestions developers should keep in mind when formulating prompts to avoid confusion and enhance Copilot's response accuracy.\r\n\r\n### **Avoid ambiguous language**; \r\n\r\n> Be precise in describing the coding task or issue.\r\n\r\n### **Don't overcomplicate prompts with multiple requests**; \r\n\r\n> Focus on one action per prompt.\r\n\r\n### **Refrain from including irrelevant details** \r\n\r\n> that can confuse the AI's context understanding.\r\n\r\n### **Avoid vague objectives**; \r\n\r\n> instead, describe the desired outcome or behavior clearly.\r\n\r\n### **Don't use jargon or acronyms that might not be universally understood**, \r\n\r\n> unless they are common in your codebase and relevant to the prompt."
    },
    {
      "title": "Supported Languages",
      "description": "### Support for multiple popular development languages\r\n\r\nGitHub Copilot, powered by OpenAI's GPT model, is works really well in numerous programming languages, thanks to its training on a multitude of public repositories.\r\n\r\nTo demonstrate, let's see how Chat will respond when we ask it to produce suggestions for Java, Kotlin and Swift\r\n\r\n(create a new untitled file)\r\n\r\nLaunch GitHub Copilot Chat",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 9,
          "character": 27
        }
      }
    },
    {
      "title": "Chat language questions",
      "description": "### First, let's see check out how Chat responds if we interact with it as if it was ChatGPT.\r\n\r\n#### Instruction 1\r\n```text\r\nlist down the file extensions for the following programming languages: Kotlin, Java, Swift.\r\n\r\nGenerate the response in a table with two columns: Language, Extension\r\n```\r\n\r\n#### Instruction 2\r\nNext, let's ask it to add a column in the in the table\r\n\r\n```text\r\nadd in the table the common application type used for these languages, like desktop, web, mobile?\r\n```\r\n\r\n#### Java\r\nNow, let's ask it to generate a file scaffolding for Java\r\n\r\n```text\r\nWhat is an example of a medium complexity Java class template that could be used as a starting point for a new project?\r\n```\r\n\r\n#### Kotlin\r\nTry Kotlin\r\n\r\n```text\r\nWhat is an example of a medium complexity Kotlin class template that could be used as a starting point for a new project?\r\n```\r\n\r\n#### Swift\r\nThen Swift\r\n\r\n```text\r\nWhat is an example of a medium complexity Swift class template that could be used as a starting point for a new project?\r\n```"
    },
    {
      "title": "GitHub Doc Languages",
      "description": "### Works with other languages\r\nDespite focusing on JavaScript and Python in today's demonstrations, the methods highlighted are broadly applicable across other languages with GitHub Copilot. Its training on extensive public codebases enables support in most languages you might use. \r\n\r\nAccording to GitHub Documentation, Copilot excels in languages such as Python, JavaScript, TypeScript, Ruby, Go, C#, and C++, and it's adept at crafting database queries as well.\r\n\r\nhttps://docs.github.com/en/copilot/using-github-copilot/getting-started-with-github-copilot\r\n\r\n### Use it now in your daily workflow\r\nTo fully realize the capabilities of GitHub Copilot, incorporating it into your daily development routine is essential. This practice allows you to experience its full potential and enhance your coding process."
    },
    {
      "title": "Chat as Learning tool",
      "description": "# A Learning Tool Beyond Code\r\n\r\nWhile GitHub Copilot Chat is primarily designed to assist with code-related queries, it can be an excellent resource for broader learning within the software development domain. Much like ChatGPT, you can use Copilot Chat to gain insights into various programming concepts, software development best practices, and industry knowledge.\r\n\r\n## Extend Your Knowledge with Copilot Chat\r\n\r\nDo you have questions about software development methodologies, operational best practices, or want to learn about the trends in tech? Just ask Copilot Chat. Here are some examples of non-code-related questions you can pose:\r\n\r\n> Launch Chat in Editor mode for a better real-estate view. Paste the questions below and show the responses.\r\n\r\n- \"*What is DevOps and how can it make me more productive as a Developer?*\"\r\nThis question could provide you with a clear and concise explanation of DevOps practices. It might include how continuous integration/continuous deployment (CI/CD) pipelines can streamline your workflows, how automation can speed up your processes, and how DevOps encourages collaboration between development and operations teams.\r\n\r\n- \"*What are the leading practices for an efficient Pull Request process?*\"\r\nUnderstanding the nuances of a good pull request process can significantly impact team collaboration and code quality. Copilot Chat can offer tips on writing descriptive PR summaries, why you should keep changes focused and small, as well as the importance of code reviews and how to approach them.\r\n\r\n## Learning and Professional Development\r\n\r\nRemember, GitHub Copilot Chat can be a powerful starting point for exploration and learning. Whether you're looking to understand a new concept, brush up on practice, or get advice on navigating career-related challenges, it's a readily available AI assistant that can complement your growth as a developer and tech professional.\r\n\r\nPress `Next` to continue",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 34,
          "character": 1
        }
      }
    },
    {
      "title": "Recap",
      "description": "# Chat Summary\r\n\r\nAs we wrap up this topic, let's take a moment to summarize the key points covered in the previous steps:\r\n\r\n1. **Introduction to GitHub Copilot Chat:** We explored the conversational interface for GitHub Copilot, which serves as an AI pair programmer to enhance developer productivity and creativity.\r\n\r\n2. **Prompt Crafting Principles and Engineering:** The importance of crafting clear, specific, and short prompts was highlighted to elicit the most effective responses from GitHub Copilot Chat.\r\n\r\n3. **The 3 S's of GitHub Copilot Chat:** Simple, Specific, and Short prompts lead to better interaction outcomes and demonstrate how to create queries for function definition, error correction, test writing, exception handling, and structure scaffolding.\r\n\r\n4. **Prompt Crafting Guidance:** We discussed best practices for formulating prompts, such as avoiding ambiguous language and focusing on singular actions to improve Copilot's response accuracy.\r\n\r\n5. **Supported Languages:** GitHub Copilot Chat's versatility was showcased by demonstrating its proficiency in a variety of languages like Java, Kotlin, and Swift.\r\n\r\n6. **Chat Language Questions:** We examined how GitHub Copilot Chat handles direct coding-related instructions, as well as requests for more complex templates and scaffolding in multiple programming languages.\r\n\r\n7. **GitHub Doc Languages:** The broader language support of GitHub Copilot was mentioned, emphasizing that the practices demonstrated are applicable across many other languages as well.\r\n\r\n8. **Chat as Learning tool:** Finally, we discussed how GitHub Copilot Chat can be used as a broader learning assistant, not limited to code assistance but also encompassing DevOps, best practices, and the relevant industry trends.\r\n\r\n",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 26,
          "character": 1
        }
      }
    }
  ],
  "ref": "main"
}
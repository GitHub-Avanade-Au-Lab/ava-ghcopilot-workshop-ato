{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "01-Basic-Usage",
  "steps": [
    {
      "title": "Introduction - Code Completion",
      "description": "# Basic Usage\r\n\r\n>> 2mins\r\n\r\n## Demos\r\n\r\nIn this first demo, we're going to explore the core functionality of GitHub Copilot, which is Code Completion. \r\n\r\nWe are going to learn the basics of how you can leverage this AI-powered tool to enhance your coding experience.\r\n\r\n\r\nPress `Next` to continue ðŸ‘‡"
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "# Context is Key\n\n>> 3mins (Demo)\n\nContext provides the necessary backdrop that informs the purpose and function of the code. \n\nThis \"context\" helps GitHub Copilot anticipate the most likely suggestions that align with your overall goal.\n\nFor GitHub Copilot, context comes from comments, code structure, and opened files that guide its AI to generate relevant and useful suggestions. \n\nLet's begin with a straightforward Q&A comment in our demo.js file. I will write simple Q&A written in javascript comments and let Github Copilot suggest an answer.\n\n### Try it out\n\n```javascript\n//Question: What are the popular database frameworks?\n//Answer:\n```\n\nAfter pasting the comment, put your cursor after the colon in \"Answer:\" and press the `Spacebar`\n\nCopilot's suggestion will appear in a translucent text, usually referred to as \"Ghost Text\". Simply press `Tab` to accept the suggestion.\n\n>> The Question in your comment and the word \"Answer\" gave the necessary context to Copilot which predicted that you have asked a question and looking for an answer.\n\n&nbsp;\n\n> Remember to use the language-specific commenting symbols. This ensures you don't get syntax errors and Copilot can accurately interpret your intent and offer the most suitable suggestions for your code.\n\nPress `Next` to continue ðŸ‘‡",
      "line": 17,
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 28
        }
      }
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "## Vague or unclear comments\n\nUsing vague or unclear comments can cause Copilot to suggest unexpected code.\n\n>> 3 mins (Demo)\n\n## Try it out\n\nDelete any existing code and comment in this file. We'll test  how GitHub Copilot responds with vague requests.\n\n> `// Generate a class\n\nPress `Enter` twice start from the end of the comment. Press `Tab` once you see Copilot's suggestion then `Enter`. Continue pressing `Tab` then `Enter` until Copilot completes the function definition.\n\nBecause the comment lacks additional context, it will suggest the most likely code based on its knowledge.\n\n> Note: Suggestions may differ from others\n\nNotice that vague comments may yield unexpected suggestions from GitHub Copilot. For precise, useful code generation, always provide clear, specific comments to guide its suggestion.\n\nPress `Next` to continue ðŸ‘‡\n\n\n",
      "line": 1,
      "selection": {
        "start": {
          "line": 11,
          "character": 23
        },
        "end": {
          "line": 11,
          "character": 63
        }
      }
    },
    {
      "file": "exercise/javascript/tasks.js",
      "description": "# Clear Comments\n\n>> 3mins (Demo)\n\nLet's see some more code completions. Let's give GitHub Copilot clearer context on what we're trying to do by adding the following comment to the file line of the tasks.js file. \n\n## Try it out\n\n> // Generate a Person class with properties name and age and a method calculate that returns the age of the person in 10 years.\n\nPress `Enter` twice after the comment.\n\nThen accept Copilot's suggestions by pressing the `Tab` then `Enter` key as you see the suggestions come up.\n\n\n## Testing the function\n\n### Node.JS required\n\nLet's run and test what Copilot suggested in the terminal. \n\n> Option 1\n\n\n`node exercise\\javascript\\tasks.js`\n\n> Option 2\n\n`cd exercise\\javascript`\n\n`node tasks.js`\n\nRemember to Save the File before executing the above command in the terminal.\n\n\n>> Key take away: Providing a clear context or \"goal\" for Copilot will increase the chances of yeilding the most relevant suggestions.\n\nPress `Next` to continue ðŸ‘‡\n",
      "line": 15,
      "selection": {
        "start": {
          "line": 11,
          "character": 101
        },
        "end": {
          "line": 11,
          "character": 109
        }
      }
    },
    {
      "file": "exercise/javascript/demo.js",
      "description": "# Additional Suggestions\r\n\r\n>> 2mins (Demo)\r\n\r\n## Additional Suggestions Shortcut\r\n### Ctrl + Enter (Both Windows and Mac).\r\n\r\nDelete all the contents of demo.js. \r\n\r\nLet's get Copilot help us create a new function. Then we will ask it for additional suggestions (when available). \r\n\r\n## Try it out\r\n\r\nType or copy paste below at the top of demo.js\r\n\r\n> // Create a function that calculates the sum of the two lowest numbers given an array of 5 positive integers. Display the two lowest numbers in the array.\r\n\r\nWait for Copilot to suggest all the parameters (not the entire function yet) then press Ctrl+Enter to view Copilot's additional suggestion pane.\r\n\r\nOnce you see this line (or something similar), press `Ctrl + Enter`\r\n\r\n```\r\nfunction sumTwoSmallestNumbers(numbers) {\r\n```    \r\n\r\n\r\nAfter pressing Ctrl+Enter, you should see a new pane showing the **Additional Suggestions pane**\r\n\r\nSelect the suggestion that satisfies your requirement.\r\n\r\n>> Demo Tip: Rephrase the comment or a different function name if Copilot fails to generate additional suggestions.\r\n\r\nPress `Next` to continue",
      "line": 3
    },
    {
      "file": "exercise/javascript/refactor.js",
      "description": "## Ask help with Refactoring\r\n\r\n>> 2mins (Demo)\r\n\r\n**Refactoring** is the process of restructuring existing code without changing its external behavior. Its primary **_purpose is to improve_** the nonfunctional attributes of the software, making it easier to comprehend, reducing its complexity, and enhancing its maintainability.\r\n\r\n\r\n## Inline Chat \r\n\r\nIn this topic, we will cover the inline chat, where you can interact with GitHub Copilot using natural language directly from the file you're editing.\r\n\r\n## Shortcuts (VS Code)\r\n\r\nTo launch Inline-chat, simply press these key combination\r\n\r\n### Cmd (âŒ˜) + i  for Mac\r\n### Ctrl + i for Windows\r\n\r\n## Try it out\r\n\r\nThis getAdultNames function can be refactored using modern JavaScript features to be more concise and readable. Here's how you could ask GitHub Copilot to help with the refactoring:\r\n\r\n1. Highlight the getAdultNames function in the code editor.\r\n1. Activate Github Copilot's inline chat feature. (`Ctrl + i or Cmd + i`)\r\n1. Ask Copilot, \"Please refactor this function to use more modern JavaScript syntax and make it more efficient\"\r\n\r\nPress `Next` to continue\r\n",
      "line": 2,
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 11,
          "character": 136
        }
      }
    },
    {
      "file": "exercise/javascript/errorhandler.js",
      "description": "## Ask help with error handling\r\n\r\n>> 3mins (Demo)\r\n\r\n### Error Handling\r\n\r\nThis javascript code reads the contents of the config.json file located in the same folder.\r\nBut right now, it will only work on a \"Happy path\". If the file doesn't exist of the json is malformed, the function won't be able to handle it gracefully.\r\n\r\n### Show errors (Trainer)\r\n\r\n**Malformed JSON**\r\n1. Open config.json and add a stray comma at the end (to make it malformed). Save.\r\n1. change dir to exercise\\javascript\r\n1. Execute `node errorhandler.js` from the terminal\r\n\r\nThis will produce an error related to the malformed json.\r\n\r\n**Unknown filename**\r\n1. Correct config.json by removing the stray comma\r\n1. Inside errorhandler.js, change config.json to configs.json (with an 's')\r\n1. Execute the code\r\n\r\nThis will produce a file not found error.\r\n\r\n## Try it out\r\n\r\nNow, letâ€™s see how to ask GitHub Copilot to suggest error handling:\r\n\r\n1. Highlight the entire read_config function.\r\n1. Activate GitHub Copilot's inline chat feature.\r\n1. Ask Copilot, \"Add error handling to this function to manage non-existent file paths and handle invalid JSON content gracefully\"\r\n\r\nAccept the suggestion, then test the code again with the following scenarios:\r\n\r\n- Malformed config.json\r\n- Correct config.json, but wrong filename\r\n\r\nPress `Next` to continue",
      "line": 2,
      "selection": {
        "start": {
          "line": 32,
          "character": 18
        },
        "end": {
          "line": 33,
          "character": 1
        }
      }
    },
    {
      "file": "exercise/html/demo.html",
      "description": "## Other language support\r\n\r\n>> 3mins (Demo)\r\n\r\nCode suggestions for other languages.\r\n\r\n>> Tip: Viewing the HTML - Right click the Tab with title \"demo.html\", then select \"Reveal in File Explorer. Double click demo.html.\r\n\r\n## Try it out\r\n\r\nLet's try the code completions again, this time with an HTML.\r\n\r\n> `<!--Create a basic HTML page boilerplate that uses external CSS stylesheet named \"styles.css\", and a script tag for a JavaScript file named \"scripts.js\" placed at the end of the body. Within the body, include a header section with a navigation bar containing placeholder links for \"Home\" and \"Contact Us\". Also, add a main content area with a sample article that includes a heading, two paragraphs of Lorem Ipsum text, and an image with alt text. Finally, include a footer with a copyright notice.-->`\r\n\r\n### Commenting symbol\r\n\r\n>> Notice the comment symbol <!---->. Because we're using a HTML file, we need to use the correct commenting symbol.\r\n\r\nPress `Enter` at the end of the comment, review and accept the suggestions until complete.\r\n\r\n> Tip: If Copilot does not provide a complete code suggestion, or it's taking a while to Tab and Enter, simply highlight the code, including your comments at the top, press Ctrl + i then type `Generate the full HTML code with tailwind CSS requirement I have provided.`. \r\n\r\nOnce Copilot completes the HTML, save the file the view the HTML in a browser. \r\n\r\n>> Right click the Tab with title `demo.html`, then select `Reveal in File Explorer`. Double click demo.html.\r\n\r\nPress `Next` to Continue.\r\n",
      "line": 1,
      "selection": {
        "start": {
          "line": 9,
          "character": 4
        },
        "end": {
          "line": 9,
          "character": 125
        }
      }
    },
    {
      "file": "exercise/javascript/utilities.js",
      "description": "## Files as Context\n\nGitHub Copilot can provide better suggestions the more context you provide it. Besides using clear comments, meaningful names for functions and variables, having related files open can also help GitHub Copilot to generate more relevant suggestions, which we will see in the next demo.\n\n### Use Neighboring files as Context\n\nutilities.js is a sample javascript file with helper functions.\n\nInstead of just the function definition, each functions are defined with the appropriate documentation, such comments about the parameters and the return value.\n\n\n### Try it out\n\n1. Keep utilities.js open (Right-click \"Pin\" so it will stay opened)\n1. Go to `demo.js`, delete code (if any) and copy paste comment below.\n\n> `// Generate a function that calcualtes the volume of a cylinder given its radius and height. Include the measurement units as part of the output.`\n\n1. Press Enter twice starting at the end of the comment.\n1. Review the suggestion\n\nCopilot will now suggest a function with a similar pattern from the opened file `utilities.js`.\n\n### Neighboring Tabs or opened files\n\nNotice how GitHub Copilot used the pattern from the open file on suggesting how to write the function. Without explicitly asking it to do so, it suggested documentation (comments) about the function. Copilot uses opened file or also known as \"neighboring tabs\" as additional context to recommend suggestions.\n\n\n## What if you want to override the suggestion?\n\nSimple: Reject the suggestion and start typing how you want the code to look like, then Copilot will start suggesting again based on what you've written.\n\nSo, if you don't want Copilot to use a specific way of writing code, you will have to take the wheel and drive.\n\nPress `Next` to continue ðŸ‘‡\n\n\n",
      "line": 1,
      "selection": {
        "start": {
          "line": 9,
          "character": 4
        },
        "end": {
          "line": 9,
          "character": 149
        }
      }
    },
    {
      "title": "Recap",
      "description": "# Recap of Basic Usage\n\n>> 3mins\n\n## Probabilistic, not deterministic\n\nGitHub Copilot is fundamentally a predictive tool that leverages a Large Language Model to suggest **probable code** snippets, **not guaranteed solutions**, based on the context and patterns in your coding.\n\n>> Trust, but Verify\n\n## Clear Comments\n\nProviding clear context to GitHub Copilot significantly improves your chances of receiving the most relevant and optimal code suggestions. Context is Key and Precision matters.\n\n## Additional suggestions (when available)\n\nWhen available, the **'Additional Suggestions pane'** in GitHub Copilot offers developers different versions of code suggestions, giving you choices to best fit your specific requirements.\n\n## Four T's \n\nWhen using Code Completions, remember these Four T's\n\n- Tab (Accept)\n- Tweak (Accept then refine)\n- Take the time to review additional/alternate suggestions\n- Trash (Reject then iterate)\n\nPress `Finish` to complete this tour. ðŸŽ‰"
    },
    {
      "title": "Basic Usage Questions",
      "description": "# Basic Usage Questions\r\n\r\n>> 5 mins Q&A"
    }
  ],
  "ref": "main"
}
{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "02-Additional-Features",
  "steps": [
    {
      "title": "Introduction",
      "description": "# Introduction to slash commands\r\n\r\n>> 1min\r\n\r\nGitHub Copilot offers interactive features beyond passive code suggestions. Let's explore commands that can accelerate your workflow and handy tools for quick documentations, explaining code snippets, and locating files or functions.\r\n\r\n\r\nPress `Next` to continue ðŸ‘‡"
    },
    {
      "file": "exercise/javascript/slashdemo.js",
      "description": "# /doc\n\n>> 2mins (Demo)\n\n## Try it out\n\nQuickly add documentation in the form of comments quickly just by highlighting an entire lines of code or fuction and pressing:\n\n`Ctrl-i` then typing `/doc`\n\n1. Highlight the getRandomInt function\n2. Press Ctrl + i then in the inline chat, type /doc\n3. Observe the suggestions\n\nTry another example with a classic asp page (choose exercise\\CSharp\\oldASP.asp)\n\n\nPress `Next` to continue ðŸ‘‡",
      "line": 3,
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 80
        }
      }
    },
    {
      "file": "exercise/javascript/slashdemo.js",
      "description": "# /explain\r\n\r\n>> 2mins (Demo)\r\n\r\n## Try it out\r\n\r\nAsk Copilot to explain a code snippet or entire function by launching the inline-chat:\r\n\r\n`Ctrl-i` then typing `/explain`\r\n\r\nLet's try it out.\r\n\r\n1. Highlight the function calculateCircleArea\r\n2. Press Ctrl + i then type /explain\r\n3. Copilot will launch the Chat window where it will display the explanation\r\n\r\nTry another example with a classic asp page (choose exercise\\CSharp\\oldASP.asp)\r\n\r\nPress `Next` to continue ðŸ‘‡",
      "line": 11
    },
    {
      "file": "exercise/javascript/slashdemo.js",
      "description": "# /fix\r\n\r\n>> 3mins (Demo)\r\n\r\nThere are errors with the parseJsonString function in this file. Can you identify what they are? (Survey the group if anyone knows the answer)\r\n\r\n## Try it out\r\n\r\nLet's ask Copilot to identify and fix it.\r\n\r\n1. Highlight the function\r\n1. Press Ctrl + i, then type /fix\r\n1. Review the suggestion from Copilot\r\n1. Accept\r\n\r\n\r\nPress `Next` to continue ðŸ‘‡",
      "line": 28
    },
    {
      "file": "exercise/javascript/slashdemo.js",
      "description": "# /fix from sub-menu\r\n\r\n>> 2mins (Demo)\r\n\r\nYou can also invoke the /fix helper by right-clicking a line of code that has a syntax error (squigly red line), and selecting Copilot -> Fix This from the sub-menu.\r\n\r\n## Try it out\r\n\r\nTry it out on the the function findLargestNumber()\r\n\r\n1. Highlight the function\r\n1. Right-click, find Copilot, then select Fix This\r\n\r\n>> Tip: You will see \"Toggle changes\" button beside the Discard button.  Clicking this will show you the proposed changes.\r\n\r\n\r\nPress `Next` to continue ðŸ‘‡",
      "line": 39
    },
    {
      "file": "exercise/javascript/utilities.js",
      "description": "# /test\r\n\r\n>> 5mins (Demo)\r\n\r\n### File to test\r\n>> File: Utilities.js\r\n\r\nGitHub Copilot can also help you save time by suggesting Unit Tests for you.\r\n\r\n## Try it out\r\n\r\n1. Make sure that functions in utilities.js are exported for testing \r\n    - Type a comment at the end of the file `//Export the functions for testing`\r\n1. Option 1: In utilities.js, right-click anywhere, then select Copilot -> Generate Tests\r\n1. Option 2: In utilities.js, press Ctrl + i, then type /tests in the inline chat\r\n1. Copilot will start suggesting the code and create the unit test file.\r\n1. Click \"Create\", then \"Accept\". Copilot will automatically create the utilities.test.js file for you.\r\n\r\n\r\n## Review the Unit Test file\r\n\r\nLet's now review the unit test file created by Copilot\r\n\r\nPress `Next` to go to utilities.test.js\r\n\r\n## Generated Unit Test\r\n\r\n>> 2mins (Demo)\r\n\r\nReview utilities.test.js\r\n\r\n### Run the tests\r\n\r\n>> Requires JEST package\r\n\r\nIf you don't have JEST, please run this command\r\n\r\n```\r\nnpm init -y && npm install --save-dev jest\r\n```\r\n\r\n### Execute the test\r\n\r\nLet's run the unit test using JEST by executing this command from the Terminal\r\n\r\n\r\n```\r\nnpx jest --coverage utilities.test.js\r\n```\r\n\r\n### --coverage\r\nInstructs Jest to report code coverage\r\n\r\n\r\nPress `Next` to continue ðŸ‘‡",
      "line": 3,
      "selection": {
        "start": {
          "line": 4,
          "character": 112
        },
        "end": {
          "line": 4,
          "character": 113
        }
      }
    },
    {
      "file": "exercise/CSharp/functions.cs",
      "title": "/test continued",
      "description": "# /test\r\n\r\n>> 5mins (Demo)\r\n\r\n### File to test\r\n>> File: functions.cs\r\n\r\nLet's try with another example using C#\r\n\r\n## Try it out\r\n\r\nDelete any existing code and comment in this file. \r\n\r\n// Generate a Person class with functions that say Hello and Goodbye.\r\n\r\nGenerate a unit test using /tests command.\r\n\r\n## Review the Unit Test file\r\n\r\nLet's now review the unit test file created by Copilot\r\n\r\n## Generated Unit Test\r\n\r\nReview functionsTest.cs\r\n\r\n### Run the tests\r\n\r\nLet's run the unit test by executing this command from the Terminal\r\n\r\nNavigate to \\exercise\\CSharp folder\r\n\r\n```\r\ndotnet test\r\n```\r\n\r\nPress `Next` to continue ðŸ‘‡"
    },
    {
      "title": "Commit Message",
      "description": "# One-Click Commit Message\r\n\r\n>> 1min (Demo)\r\n\r\nEver struggled on what to write as a commit message? With Copilot, it can help suggest draft commit messages for you.\r\n\r\n- Navigate to Git Source Control.\r\n- Look for the âœ¨ icon and click it.\r\n- Copilot will suggest a commit message based on your changes.\r\n\r\n**Remember:** If your commit includes multiple changes, Copilot will provide a commit message based recent changes but may not always suggest the best one. This is where you need to review and edit as needed before finalizing your commit.\r\n\r\nPress `Next` to continue ðŸ‘‡",
      "selection": {
        "start": {
          "line": 13,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 28
        }
      }
    },
    {
      "title": "Workspace Agent",
      "description": "## @Workspace\r\n\r\n>> 1min\r\n\r\nThe @workspace feature in Visual Studio Code and GitHub Copilot Chat uses AI to offer context-specific assistance, such as project-relevant suggestions and navigation tips by analyzing your project's files and components."
    },
    {
      "title": "Find a file",
      "description": "## Ask Copilot to find a file or files based on your needs\r\n\r\n>> 3mins (Demo)\r\n\r\n## Try it out\r\n\r\n(Open the Chat window)\r\n\r\n> `@workspace Search for js files where I can find helper functions that constructs full name from given first and last names`\r\n\r\nHit `Enter` and see what Copilot comes back with."
    },
    {
      "title": "Reference a file",
      "description": "# @workspace - #file\r\n\r\n>> 2mins (Demo)\r\n\r\nAnother feature under the @workspace helper is the `#file`, which allows you to reference a file when asking a query to Copilot Chat.\r\n\r\n## Try it out\r\n\r\n**_Do not copy and paste. Once you've typed #file: you'll be asked to select the file. Search for utilities.js and select it._**\r\n\r\n>> @workspace explain the contents of the #file:utilities.js \r\n\r\nHere's another example\r\n\r\n>> @workspace Generate a shopping cart html prototype using the pattern found in #file:demo.html\r\n\r\n(choose exercise\\html\\sample.html)\r\n\r\nReview chat's response",
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 17,
          "character": 35
        }
      }
    },
    {
      "title": "Analyze the project",
      "description": "# @workspace - Analyze project\r\n\r\n>> 3mins (Demo)\r\n\r\nThe @workspace command is more than a file finder.\r\n\r\nSuppose you've just cloned a new project to work on, and you're eager to understand its core componentsâ€”like the programming languages utilized and the functionalities it provides.\r\n\r\nYou can get a quick overview by using GitHub Copilot's chat feature. Simply input the following query:\r\n\r\n## Try it out\r\n\r\n1. Under the File menu in VS Code, select New Window\r\n1. Open the folder `nextjs-ecommerce-template`\r\n1. In the Chat window, type the following:\r\n\r\n>> @workspace analyze this project. Provide a summary of the programming languages utilized and outline the available functionalities.\r\n\r\nPress `Next` to continue",
      "selection": {
        "start": {
          "line": 13,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 7
        }
      }
    },
    {
      "title": "Quick Recommendations",
      "description": "# Quick Recommendations\r\n\r\n>> 3mins (Demo)\r\n\r\nYou can also ask with @workspace on basic recommendations.\r\n\r\n> `@workspace based on leading practices, what are your recommendations that developers may need to follow to improve this application?`\r\n\r\nLet's try it out again on the nextjs-ecommerce-template project\r\n\r\n> Swith to nextjs-ecommerce-tempate\r\n\r\n### Reminder: Copilot should not replace a full Code Analysis tool and the developer's intuition about the project\r\n\r\nCopilot will provide this response if it cannot comply with your instructions\r\n\r\n>> Without seeing the actual code, it's hard to provide a comprehensive review. It would be beneficial to review the actual code files, check for code comments, consistent coding style, error handling, and other best practices.\r\n\r\nPress `Next` to continue\r\n",
      "selection": {
        "start": {
          "line": 7,
          "character": 4
        },
        "end": {
          "line": 7,
          "character": 137
        }
      }
    },
    {
      "title": "Terminal and VS Code",
      "description": "# @terminal and @vscode\r\n\r\n>> 2 mins (Demo)\r\nDomain specific helpers from GitHub Copilot\r\n\r\n@vscode - Ask questions about VS Code\r\n\r\n> `@vscode how do I disable the GitHub Copilot extension?`\r\n\r\n@terminal - Ask how to do something in the terminal\r\n\r\n> `@terminal how do I copy a file from one folder to another using the terminal?`\r\n\r\nThese handy helpers can provide you answers to questions relevant to VS Code or executing commands from the Terminal window."
    },
    {
      "title": "Additional Features Questions",
      "description": "# Additional Features Q&A\r\n\r\n>> 5 mins Q&A\r\n\r\n## Check time/Break",
      "selection": {
        "start": {
          "line": 5,
          "character": 1
        },
        "end": {
          "line": 5,
          "character": 20
        }
      }
    }
  ],
  "ref": "ava-ghcopilot-workshop-base"
}